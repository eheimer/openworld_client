using System;
using System.Collections;
using System.Collections.Generic;
using Openworld.Models;
using Proyecto26;
using UnityEngine;

namespace Openworld
{
  public class Communicator : MonoBehaviour
  {

    protected GameManager gameManager;
    private string url;

    protected void Start()
    {
      gameManager = FindObjectOfType<GameManager>();
    }

    public void SetUrl(string url)
    {
      this.url = url;
      if (url.EndsWith("/"))
      {
        this.url = url.Substring(0, url.Length - 1);
      }
    }

    private RequestHelper getBasicRequest(string path)
    {
      string url = this.url + path;
      return new RequestHelper
      {
        Uri = url,
        EnableDebug = gameManager.debugApi
      };
    }

    private RequestHelper getAuthorizedRequest(string path)
    {
      RequestHelper req = getBasicRequest(path);
      var headers = new Dictionary<string, string>
      {
          { "Authorization", "Bearer " + gameManager.GetAuthToken() }
      };
      req.Headers = headers;
      return req;
    }

    private void HandleError(Exception err, Action<RequestException> handler)
    {
      handler((RequestException)err);
    }

    // this wraps the RestClient.Get method in a coroutine
    private IEnumerator Get<T>(RequestHelper req, Action<T> success, Action<RequestException> error)
    {
      var promise = RestClient.Get<T>(req);

      yield return promise;
      promise.Done(
        res => success(res),
        err => HandleError(err, error));
    }

    // this wraps the RestClient.Post method in a coroutine
    private IEnumerator Post<T>(RequestHelper req, Action<T> success, Action<RequestException> error)
    {
      var promise = RestClient.Post<T>(req);

      yield return promise;

      promise.Done(
        res => success(res),
        err => HandleError(err, error));
    }

    // this wraps the RestClient.GetArray method in a coroutine
    private IEnumerator GetArray<T>(RequestHelper req, Action<T[]> success, Action<RequestException> error)
    {
      var promise = RestClient.GetArray<T>(req);

      yield return promise;

      promise.Done(
        res => success(res),
        err => HandleError(err, error));
    }

    // this wraps the RestClient.Patch method in a coroutine
    private IEnumerator Patch<T>(RequestHelper req, Action<T> success, Action<RequestException> error)
    {
      var promise = RestClient.Patch<T>(req);

      yield return promise;

      promise.Done(
        res => success(res),
        err => HandleError(err, error));
    }

    // this wraps the RestClient.Delete method in a coroutine
    private IEnumerator Delete(RequestHelper req, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var promise = RestClient.Delete(req);

      yield return promise;

      promise.Done(
        res => success(res),
        err => HandleError(err, error));
    }

    // BEGIN ROUTE METHODS
    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void Register(string email, string password, string username, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/auth/register";
      var req = getBasicRequest(path);
      req.Body = new RegisterRequest { email = email, password = password, username = username };
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetPlayer(string playerId, Action<PlayerResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}";
      path = path.Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<PlayerResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetPlayerDetail(string playerId, Action<PlayerDetailResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}";
      path = path.Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<PlayerDetailResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void Login(string username, string password, Action<LoginResponse> success, Action<RequestException> error)
    {
      var path = "/auth/login";
      var req = getBasicRequest(path);
      req.Body = new LoginRequest { username = username, password = password };
      StartCoroutine(Post<LoginResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetGames(Action<GamesResponse[]> success, Action<RequestException> error)
    {
      var path = "/games";
      var req = getAuthorizedRequest(path);
      StartCoroutine(GetArray<GamesResponse>(req, success, error));
    }

    public virtual void GetRaces(Action<RacesResponse[]> success, Action<RequestException> error)
    {
      var path = "/race";
      var req = getAuthorizedRequest(path);
      StartCoroutine(GetArray<RacesResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void CreateGame(string name, Action<Game> success, Action<RequestException> error)
    {
      var path = "/games";
      var req = getAuthorizedRequest(path);
      req.Body = new CreateGameRequest { name = name };
      StartCoroutine(Post<Game>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetGame(string gameId, Action<GameResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<GameResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void UpdateGame(string gameId, string name, int maxPlayers, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateGameRequest { name = name, maxPlayers = maxPlayers };
      StartCoroutine(Patch(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void DeleteGame(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Delete(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void JoinGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}";
      path = path.Replace("{gameId}", gameId).Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void LeaveGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}";
      path = path.Replace("{gameId}", gameId).Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Delete(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void InvitePlayer(string gameId, string email, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new InvitePlayerRequest { email = email };
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetGameBattles(string gameId, Action<BattleResponse[]> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(GetArray<BattleResponse>(req, success, error));
    }

    // Autogenerated 4/8/2022 6:11:00 PM
    //   by GenerateCommunicator.
    public virtual void CreateCharacter(string gameId, string name, int raceId, int strength, int dexterity, int intelligence, Action<CharacterDetail> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new CreateCharacterRequest { name = name, raceId = raceId, strength = strength, dexterity = dexterity, intelligence = intelligence };
      StartCoroutine(Post<CharacterDetail>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetGameCharacters(string gameId, Action<ResponseHelper[]> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(GetArray<ResponseHelper>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetCharacter(string characterId, Action<CharacterResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<CharacterResponse>(req, success, error));
    }

    // Autogenerated 4/8/2022 6:11:00 PM
    //   by GenerateCommunicator.
    public virtual void UpdateCharacter(string characterId, string name, int strength, int dexterity, int intelligence, int movement, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateCharacterRequest { name = name, strength = strength, dexterity = dexterity, intelligence = intelligence, movement = movement };
      StartCoroutine(Patch(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void DeleteCharacter(string characterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Delete(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetCharacterDetail(string characterId, Action<CharacterDetailResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<CharacterDetailResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void CreateBattle(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void GetBattle(string gameId, string battleId, Action<BattleResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Get<BattleResponse>(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void DeleteBattle(string gameId, string battleId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Delete(req, success, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public virtual void CreateEnemy(string gameId, string battleId, int monsterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}/enemies";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      req.Body = new MonsterRequest { monsterId = monsterId };
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public virtual void AddCharacterSkill(string characterId, string skillId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      req.Body = new CreateCharacterSkillRequest { skillId = skillId };
      StartCoroutine(Post(req, success, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public virtual void UpdateCharacterSkill(string characterId, string skillId, int level, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills/{skillId}";
      path = path.Replace("{characterId}", characterId).Replace("{skillId}", skillId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateCharacterSkillRequest { level = level };
      StartCoroutine(Patch(req, success, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public virtual void DeleteCharacterSkill(string characterId, string skillId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills/{skillId}";
      path = path.Replace("{characterId}", characterId).Replace("{skillId}", skillId);
      var req = getAuthorizedRequest(path);
      StartCoroutine(Delete(req, success, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public virtual void GetSkills(Action<Skill[]> success, Action<RequestException> error)
    {
      var path = "/skills";
      var req = getAuthorizedRequest(path);
      StartCoroutine(GetArray<Skill>(req, success, error));
    }
  }
}