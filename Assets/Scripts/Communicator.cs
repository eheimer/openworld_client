using System;
using System.Collections;
using System.Collections.Generic;
using Openworld.Models;
using Proyecto26;
using UnityEngine;

namespace Openworld
{
  public class Communicator : MonoBehaviour
  {

    private const string prodUrl = "https://www.openworld-game.com";
    private const string devUrl = "http://localhost:3000";
    [SerializeField] public string baseUrl = prodUrl;
    [SerializeField] public string apiPath = "/api/v1";
    protected GameManager gameManager;

    protected void Start()
    {
      gameManager = FindObjectOfType<GameManager>();
    }

    public void SetIsDevUrl(bool isDevUrl)
    {
      baseUrl = isDevUrl ? devUrl : prodUrl;
    }

    private RequestHelper getBasicRequest(string path)
    {
      string url = baseUrl + apiPath + path;
      return new RequestHelper
      {
        Uri = url,
        EnableDebug = gameManager.debugApi
      };
    }

    private RequestHelper getAuthorizedRequest(string path)
    {
      RequestHelper req = getBasicRequest(path);
      var headers = new Dictionary<string, string>();
      headers.Add("Authorization", "Bearer " + gameManager.GetAuthToken());
      req.Headers = headers;
      return req;
    }

    private void HandleError(Exception err, Action<RequestException> handler)
    {
      handler((RequestException)err);
    }

    // BEGIN ROUTE METHODS
    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void Register(string email, string password, string username, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/auth/register";
      var req = getBasicRequest(path);
      req.Body = new RegisterRequest { email = email, password = password, username = username };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetPlayer(string playerId, Action<PlayerResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}";
      path = path.Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<PlayerResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetPlayerDetail(string playerId, Action<PlayerDetailResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}";
      path = path.Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<PlayerDetailResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void Login(string username, string password, Action<LoginResponse> success, Action<RequestException> error)
    {
      var path = "/auth/login";
      var req = getBasicRequest(path);
      req.Body = new LoginRequest { username = username, password = password };
      RestClient.Post<LoginResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetGames(Action<GamesResponse[]> success, Action<RequestException> error)
    {
      var path = "/games";
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<GamesResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    public void GetRaces(Action<RacesResponse[]> success, Action<RequestException> error)
    {
      var path = "/race";
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<RacesResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void CreateGame(string name, int maxPlayers, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games";
      var req = getAuthorizedRequest(path);
      req.Body = new CreateGameRequest { name = name, maxPlayers = maxPlayers };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetGame(string gameId, Action<GameResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<GameResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void UpdateGame(string gameId, string name, int maxPlayers, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateGameRequest { name = name, maxPlayers = maxPlayers };
      RestClient.Patch(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void DeleteGame(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void JoinGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}";
      path = path.Replace("{gameId}", gameId).Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void LeaveGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}";
      path = path.Replace("{gameId}", gameId).Replace("{playerId}", playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void InvitePlayer(string gameId, string email, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new InvitePlayerRequest { email = email };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetGameBattles(string gameId, Action<BattleResponse[]> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<BattleResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:11:00 PM
    //   by GenerateCommunicator.
    public void CreateCharacter(string gameId, string name, int strength, int dexterity, int intelligence, int raceId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new CreateCharacterRequest { name = name, strength = strength, dexterity = dexterity, intelligence = intelligence, raceId = raceId };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetGameCharacters(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Get(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetCharacter(string characterId, Action<CharacterResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<CharacterResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:11:00 PM
    //   by GenerateCommunicator.
    public void UpdateCharacter(string characterId, string name, int strength, int dexterity, int intelligence, int movement, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateCharacterRequest { name = name, strength = strength, dexterity = dexterity, intelligence = intelligence, movement = movement };
      RestClient.Patch(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void DeleteCharacter(string characterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetCharacterDetail(string characterId, Action<CharacterDetailResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<CharacterDetailResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void CreateBattle(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles";
      path = path.Replace("{gameId}", gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void GetBattle(string gameId, string battleId, Action<BattleResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<BattleResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void DeleteBattle(string gameId, string battleId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 3/22/2022 10:21:41 AM
    //   by GenerateCommunicator.
    public void CreateEnemy(string gameId, string battleId, int monsterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}/enemies";
      path = path.Replace("{gameId}", gameId).Replace("{battleId}", battleId);
      var req = getAuthorizedRequest(path);
      req.Body = new MonsterRequest { monsterId = monsterId };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public void AddCharacterSkill(string characterId, string skillId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills";
      path = path.Replace("{characterId}", characterId);
      var req = getAuthorizedRequest(path);
      req.Body = new CreateCharacterSkillRequest { skillId = skillId };
      RestClient.Post(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public void UpdateCharacterSkill(string characterId, string skillId, int level, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills/{skillId}";
      path = path.Replace("{characterId}", characterId).Replace("{skillId}", skillId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateCharacterSkillRequest { level = level };
      RestClient.Patch(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public void DeleteCharacterSkill(string characterId, string skillId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/skills/{skillId}";
      path = path.Replace("{characterId}", characterId).Replace("{skillId}", skillId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

    // Autogenerated 4/8/2022 6:02:35 PM
    //   by GenerateCommunicator.
    public void GetSkills(Action<Skill[]> success, Action<RequestException> error)
    {
      var path = "/skills";
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<Skill>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

  }
}