using System;
using System.Collections;
using System.Collections.Generic;
using Openworld.Models;
using Proyecto26;
using UnityEngine;

namespace Openworld
{
  public class Communicator : MonoBehaviour
  {

    private const string prodUrl = "https://www.openworld-game.com";
    private const string devUrl = "http://localhost:3001";
    [SerializeField] public string baseUrl = prodUrl;
    [SerializeField] public string apiPath = "/api/v1";
    protected GameManager gameManager;

    protected void Start()
    {
      gameManager = FindObjectOfType<GameManager>();
    }

    public void SetIsDevUrl(bool isDevUrl)
    {
      baseUrl = isDevUrl ? devUrl : prodUrl;
    }

    private RequestHelper getBasicRequest(string path)
    {
      string url = baseUrl + apiPath + path;
      return new RequestHelper
      {
        Uri = url,
        EnableDebug = gameManager.debugApi
      };
    }

    private RequestHelper getAuthorizedRequest(string path)
    {
      RequestHelper req = getBasicRequest(path);
      var headers = new Dictionary<string, string>();
      headers.Add("Authorization", "Bearer " + gameManager.GetAuthToken());
      req.Headers = headers;
      return req;
    }

    private void HandleError(Exception err, Action<RequestException> handler)
    {
      handler((RequestException)err);
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void Register(string email, string password, string name, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/players"; 
      var req = getBasicRequest(path);
      req.Body = new RegisterRequest { email = email , password = password , name = name  };
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetPlayer(string playerId, Action<PlayerResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}"; 
      path = path.Replace("{playerId}",playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<PlayerResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetPlayerDetail(string playerId, Action<PlayerDetailResponse> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}/detail"; 
      path = path.Replace("{playerId}",playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<PlayerDetailResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void Login(string email, string password, Action<LoginResponse> success, Action<RequestException> error)
    {
      var path = "/login"; 
      var req = getBasicRequest(path);
      req.Body = new LoginRequest { email = email , password = password  };
      RestClient.Post<LoginResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetGames(string playerId, Action<GamesResponse[]> success, Action<RequestException> error)
    {
      var path = "/players/{playerId}/games"; 
      path = path.Replace("{playerId}",playerId);
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<GamesResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void CreateGame(string name, int maxPlayers, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games"; 
      var req = getAuthorizedRequest(path);
      req.Body = new CreateGameRequest { name = name , maxPlayers = maxPlayers  };
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetGame(string gameId, Action<GameResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<GameResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void UpdateGame(string gameId, string name, int maxPlayers, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateGameRequest { name = name , maxPlayers = maxPlayers  };
      RestClient.Patch<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void DeleteGame(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void JoinGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}"; 
      path = path.Replace("{gameId}",gameId).Replace("{playerId}",playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void LeaveGame(string gameId, string playerId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players/{playerId}"; 
      path = path.Replace("{gameId}",gameId).Replace("{playerId}",playerId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void InvitePlayer(string gameId, string email, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/players"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new InvitePlayerRequest { email = email  };
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetGameBattles(string gameId, Action<BattleResponse[]> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      RestClient.GetArray<BattleResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void CreateBattle(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetBattle(string gameId, string battleId, Action<BattleResponse> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}"; 
      path = path.Replace("{gameId}",gameId).Replace("{battleId}",battleId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<BattleResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void DeleteBattle(string gameId, string battleId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}"; 
      path = path.Replace("{gameId}",gameId).Replace("{battleId}",battleId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void CreateEnemy(string gameId, string battleId, int monsterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/battles/{battleId}/enemies"; 
      path = path.Replace("{gameId}",gameId).Replace("{battleId}",battleId);
      var req = getAuthorizedRequest(path);
      req.Body = new MonsterRequest { monsterId = monsterId  };
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void CreateCharacter(string gameId, string name, int maxHp, int baseResist, int inventorySize, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      req.Body = new CreateCharacterRequest { name = name , maxHp = maxHp , baseResist = baseResist , inventorySize = inventorySize  };
      RestClient.Post<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetGameCharacters(string gameId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/games/{gameId}/characters"; 
      path = path.Replace("{gameId}",gameId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetCharacter(string characterId, Action<CharacterResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}"; 
      path = path.Replace("{characterId}",characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<CharacterResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void UpdateCharacter(string characterId, string name, int maxHp, int baseResist, int inventorySize, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}"; 
      path = path.Replace("{characterId}",characterId);
      var req = getAuthorizedRequest(path);
      req.Body = new UpdateCharacterRequest { name = name , maxHp = maxHp , baseResist = baseResist , inventorySize = inventorySize  };
      RestClient.Patch<ResponseHelper>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void DeleteCharacter(string characterId, Action<ResponseHelper> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}"; 
      path = path.Replace("{characterId}",characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Delete(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

// Autogenerated 3/1/2022 6:56:52 PM
//   by GenerateCommunicator.
    public void GetCharacterDetail(string characterId, Action<CharacterDetailResponse> success, Action<RequestException> error)
    {
      var path = "/characters/{characterId}/detail"; 
      path = path.Replace("{characterId}",characterId);
      var req = getAuthorizedRequest(path);
      RestClient.Get<CharacterDetailResponse>(req)
      .Then(res => { Debug.Log(res); success(res); })
      .Catch(err => HandleError(err, error));
    }

  }
}